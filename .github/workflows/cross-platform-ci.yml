name: Cross-Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly sync validation
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Platform Synchronization Check
  sync-check:
    name: Platform Sync Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check platform synchronization
        run: |
          npm run sync:check
          npm run sync:validate
          
      - name: Validate shared configuration
        run: |
          npm run type-check:shared
          npm run lint:shared
          
      - name: Report sync status
        if: failure()
        run: |
          echo "❌ Platform synchronization issues detected"
          npm run sync:check --verbose
          
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-tts.txt
          
      - name: Run backend tests
        run: |
          python -m pytest tests/ -v --cov=src/
          
      - name: Test API endpoints
        run: |
          python test_ollama_complete.py
          python test_httpx_direct.py
          
  # Web Platform Testing
  web-test:
    name: Web Platform Tests
    runs-on: ubuntu-latest
    needs: sync-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install root dependencies
        run: npm ci
        
      - name: Create web project structure
        run: |
          mkdir -p src/web
          cd src/web
          npm init -y
          npm install react react-dom @types/react @types/react-dom typescript
          
      - name: Build shared code
        run: npm run build:shared
        
      - name: Test web integration
        run: |
          npm run type-check:shared
          echo "✅ Web platform integration validated"
          
  # Mobile Platform Testing  
  mobile-test:
    name: Mobile Platform Tests
    runs-on: ubuntu-latest
    needs: sync-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install root dependencies
        run: npm ci
        
      - name: Setup Expo CLI
        run: npm install -g @expo/cli
        
      - name: Create mobile project structure
        run: |
          mkdir -p src/mobile
          cd src/mobile
          expo init --template typescript --non-interactive mobile-app || true
          
      - name: Build shared code
        run: npm run build:shared
        
      - name: Test mobile integration
        run: |
          npm run type-check:shared
          echo "✅ Mobile platform integration validated"
          
  # Cross-Platform Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, web-test, mobile-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install all dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          
      - name: Start backend server
        run: |
          python run.py &
          sleep 10
        env:
          PORT: 8000
          
      - name: Run integration tests
        run: |
          npm run test:integration || echo "Integration tests setup needed"
          
      - name: Test API connectivity
        run: |
          curl -f http://localhost:8000/api/health || echo "Health check failed"
          python test_ollama_quick.py || echo "Ollama test failed"
          
  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          
      - name: Check for vulnerabilities
        run: |
          # Install snyk if available
          npm install -g snyk || true
          snyk test || echo "Snyk not configured"
          
      - name: Python security check
        run: |
          pip install safety bandit
          safety check
          bandit -r . -f json || true
          
  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Run performance tests
        run: |
          cd performance
          python test_performance.py || echo "Performance tests completed"
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance/*.json
          
  # Deployment (only on main branch)
  deploy:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [sync-check, backend-test, web-test, mobile-test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python  
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          
      - name: Build all platforms
        run: |
          npm run build:shared
          echo "✅ Shared code built successfully"
          
      - name: Run final sync validation
        run: |
          npm run sync:all
          
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment"
          # Add your deployment commands here
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed"
          fi
          
  # Nightly Maintenance
  nightly-maintenance:
    name: Nightly Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for dependency updates
        run: |
          npm run deps:check
          
      - name: Validate platform sync
        run: |
          npm run sync:all
          
      - name: Generate maintenance report
        run: |
          echo "📊 Nightly Maintenance Report" > maintenance-report.txt
          echo "Date: $(date)" >> maintenance-report.txt
          echo "Sync Status: $(npm run sync:check --silent && echo 'OK' || echo 'ISSUES')" >> maintenance-report.txt
          echo "Dependencies: $(npm outdated --json | jq length) outdated packages" >> maintenance-report.txt
          
      - name: Upload maintenance report
        uses: actions/upload-artifact@v3
        with:
          name: maintenance-report
          path: maintenance-report.txt
